swagger: '2.0'
info:
  contact:
    email: apiinfo@peregrine-cms.com
    name: Api Information Team
    url: 'https://api.peregrine-cms.com'
  description: 'peregrine cms api'
  license:
    name: Apache-2.0
  title: peregrine-cms-admin
  version: '1.0'
schemes:
  - http
basePath: /api/admin
consumes:
  - application/json
produces:
  - application/json
paths:
  /access.json:
    get:
      responses:
        '200':
          description: returns the user id and if available the authentication type
          schema:
            type: object
            required:
              - userID
            properties:
              authType:
                type: string
              userID:
                type: string
  /componentDefinition.json:
    get:
      parameters:
        - description: the name of the component we want to get information about
          name: name
          type: string
          in: query
        - description: the path to a content node to look up the corresponding component
          name: path
          type: string
          in: query
      responses:
        '200':
          description: get a component definition
          schema:
            type: object
            properties:
              path:
                type: string
              name:
                type: string
              schema:
                type: object
                properties:
                  fields:
                    type: object
                    additionalProperties:
                      type: string
  '/content.json{path}':
    get:
      description: returns the content for the given path
      parameters:
        - description: the path to the content, for example /content/sites
          name: path
          type: string
          in: path
      responses:
        '200':
          description: returns all the content for the given node
          schema:
            type: object
            additionalProperties:
              type: object
  '/getObject.json{path}':
    get:
      description: returns the content for the given object
      parameters:
        - description: the path to the content
          name: path
          type: string
          in: path
      responses:
        '200':
          description: returns all the content for the given node
          schema:
            type: object
            additionalProperties:
              type: object
  '/createFolder.json/{path}':
    post:
      description: create a new folder in the system
      parameters:
        - name: path
          type: string
          in: path
          description: the path where to create the new folder
          required: true
        - name: name
          type: string
          in: formData
          description: the name of the new folder
          required: true
      responses:
        200:
          description: returns all the content for the given node
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the created Folder
              path:
                type: string
                description: Path of the created Folder
        400:
          description: If the path did not resolve to a resource, the name is null or the folder already exists
          schema:
            $ref: "#/definitions/Error"
  '/createObject.json/path//{path}//name//{name}//templatePath//{templatePath}':
    get:
      description: create a new object in the system
      parameters:
        - name: path
          type: string
          in: path
          description: the path where to create the object
        - name: name
          type: string
          in: path
          description: the name of the new object
        - name: templatePath
          type: string
          in: path
          description: the path to the template of the object
      responses:
        '200':
          description: returns all the content for the given node
          schema:
            type: object
            additionalProperties:
              type: object
  '/createPage.json/{path}':
    post:
      description: create a new page in the system
      parameters:
        - name: path
          type: string
          in: path
          description: the path where to create the page
          required: true
        - name: name
          type: string
          in: formData
          description: the name of the new page
          required: true
        - name: templatePath
          type: string
          in: formData
          description: the path to the template of the page
          required: true
      responses:
        200:
          description: returns all the content for the given node
          schema:
            type: object
            properties:
              name:
                type: string
                description: Name of the created Folder
              path:
                type: string
                description: Path of the created Folder
              teamplatePath:
                type: string
                description: Path of the underlying Template
        400:
          description: If the path did not resolve to a resource
          schema:
            $ref: "#/definitions/Error"
  '/createTemplate.json/path//{path}//name//{name}':
    get:
      description: create a new template in the system
      parameters:
        - name: path
          type: string
          in: path
          description: the path where to create the template
        - name: name
          type: string
          in: path
          description: the name of the new template
      responses:
        '200':
          description: returns all the content for the given node
          schema:
            type: object
            additionalProperties:
              type: object
  '/deleteNode.json/path//{path}':
    get:
      description: delete a node
      parameters:
        - name: path
          type: string
          in: path
          description: the path to the node to delete
      responses:
        '200':
          description: '-'
          schema:
            type: object
            additionalProperties:
              type: object
  '/deletePage.json/path//{path}':
    get:
      description: delete a node
      parameters:
        - name: path
          type: string
          in: path
          description: the path to the node to delete
      responses:
        '200':
          description: '-'
          schema:
            type: object
            additionalProperties:
              type: object
  '/insertNodeAt.json/path//{path}//component//{component}//drop//{drop}':
    get:
      description: insert node at a path
      parameters:
        - name: path
          type: string
          in: path
          description: the path
        - name: component
          type: string
          in: path
        - name: drop
          type: string
          in: path
          description: before, after, into
      responses:
        '200':
          description: '-'
          schema:
            type: object
            additionalProperties:
              type: object
  '/insertNodeAt.json/path//{path}//drop//{drop}':
    post:
      description: insert node at a path
      parameters:
        - name: path
          type: string
          in: path
          description: the path
        - name: content
          type: object
          in: formData
        - name: drop
          type: string
          in: path
          description: before, after, into
      responses:
        '200':
          description: '-'
          schema:
            type: object
            additionalProperties:
              type: object
  '/list.json/{type}':
    get:
      description: list the available tools
      parameters:
        - name: type
          type: string
          in: path
          description: either tools or tools/config
      responses:
        '200':
          description: the available tools
          schema:
            type: object
            additionalProperties:
              type: object
  '/moveNodeTo.json/path//{path}//component//{component}//drop//{drop}':
    get:
      description: list the available tools
      parameters:
        - name: path
          type: string
          in: path
        - name: component
          type: string
          in: path
        - name: drop
          type: string
          in: path
      responses:
        '200':
          description: returns the new node structure at the drop location
          schema:
            type: object
            additionalProperties:
              type: object
  '/nodes.json/path//{path}':
    get:
      parameters:
        - name: path
          type: string
          in: path
      responses:
        '200':
          description: returns the node tree
          schema:
            type: object
            additionalProperties:
              type: object
  '/templates.json':
    get:
      responses:
        '200':
          description: returns the templates
          schema:
            type: object
            additionalProperties:
              type: object
  '/objects.json':
    get:
      responses:
        '200':
          description: returns the templates
          schema:
            type: object
            additionalProperties:
              type: object
  '/components.json':
    get:
      responses:
        '200':
          description: returns the templates
          schema:
            type: object
            additionalProperties:
              type: object
  'uploadFiles.json/path//{path}':
    post:
      parameters:
        - name: path
          type: string
          in: path
      responses:
        '200':
          schema:
            type: object
            additionalProperties:
              type: object
  '/repl.json/{path}':
    post:
      description: Replicates the given node(s) using the named replication service
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the node(s) to be replicated
          required: true
        - name: name
          type: string
          in: formData
          description: the name of the replication service to be used
          required: true
        - name: deep
          type: boolean
          in: formData
          description: flag indicating if only the given node and its content is replicated or all sub nodes
          required: false
      responses:
        200:
          description: returns the root node name / path and the list of the nodes referenced
          schema:
            type: object
            properties:
              sourceName:
                type: string
              sourcePath:
                type: string
              replicates:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    path:
                      type: string
        400:
          description: If the path did not resolve to a resource
          schema:
            $ref: "#/definitions/Error"
  '/ref.json/{path}':
    get:
      description: List references and their references of the given page
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the resource to lists its references
          required: true
      responses:
        200:
          description: returns the root node name / path and the list of the nodes referenced
          schema:
            type: object
            properties:
              sourceName:
                type: string
              sourcePath:
                type: string
              references:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: string
                    path:
                      type: string
        400:
          description: If the path did not resolve to a resource
          schema:
            $ref: "#/definitions/Error"
  '/refBy.json/path//{path}':
    get:
      description: Lists all the nodes that have a reference to the given node
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the resource which is the targer of the reference
          required: true
      responses:
        200:
          description: returns the root node name / path and the list of the nodes that reference the given page which includes the node, the property node and the property name that contains the link
          schema:
            type: object
            properties:
              sourceName:
                type: string
              sourcePath:
                type: string
              referencedBy:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      description: Name of the Page having a reference
                      type: string
                    path:
                      description: Path to the Page having a reference
                      type: string
                    propertyName:
                      description: Name of the Property containing the reference
                      type: string
                    propertyPath:
                      description: Path of the Resource with the property containing the reference
                      type: string
        400:
          description: If the path did not resolve to a resource
          schema:
            $ref: "#/definitions/Error"
  '/move.json/{path}':
    post:
      description: Move a given node to a new place
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the resource which is moved
          required: true
        - name: to
          type: string
          in: formData
          description: the path of the resource that is either the new parent for type 'child' or the next/previous sibling for type 'before' or 'after'
          required: true
        - name: type
          type: string
          in: formData
          description: The type of move which can be 'child' (add as child of the given to node), 'after' (add after the given to node) or 'before' (add before the given to node)
          required: true
      responses:
        200:
          description: returns the from node name and path and the new node name and path
          schema:
            $ref: "#/definitions/Move"
        400:
          description: If the path and to did not resolve to a resource or if the type was wrong
          schema:
            $ref: "#/definitions/Error"
  '/rename.json/{path}':
    post:
      description: Renames a Resource and tries to keep the order intact
      parameters:
        - name: path
          type: string
          in: path
          description: the path of the resource which is renamed
          required: true
        - name: to
          type: string
          in: path
          description: the new name of the resource
          required: true
      responses:
        200:
          description: returns the from node name and path and the new node name and path
          schema:
            $ref: "#/definitions/Move"
        400:
          description: If the path did not resolve to a resource, the to name was not provided or contained a slash
          schema:
            $ref: "#/definitions/Error"
definitions:
  Error:
    type: object
    properties:
      code:
        type: int32
      message:
        type: string
      path:
        type: string
      exception:
        type: string
      additionalProperties:
        type: string
  Move:
    type: object
    properties:
      sourceName:
        type: string
      sourcePath:
        type: string
      tagetName:
        type: string
      targetPath:
        type: string
