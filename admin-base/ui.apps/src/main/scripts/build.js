const process   = require('process')
const fs        = require('fs-extra')

const rollup    = require( 'rollup' )
const path      = require('path')
const vue       = require('rollup-plugin-vue')
const buble     = require('rollup-plugin-buble')
const camelcase = require('camelcase')

const request = require('request')

var watching = false
var consideredExtensions = []


var baseRequest = request.defaults({
    'auth': {
        'user': 'admin',
        'pass': 'admin',
        'sendImmediately': true
    }
})

function uploadToAEM(path, file) {
    var formData = {
        ':http-equiv-accept': 'application/json',
        file: fs.createReadStream( file ),
    };
    baseRequest.post({url:'http://localhost:8080' + path, formData: formData}, function optionalCallback(err, httpResponse, body) {
        if (err) {
            return console.error('upload failed:', err);
        }
        if(body) {
            console.log('file', file, 'uploaded')
        } else {
            console.log('missing body, upload for',file,'failed')
        }
    });
}

console.log('=== building vue files ========================================')

var basePath = './src/main/content/jcr_root/apps'
var distBasePath = './src/main/content/jcr_root/etc/felibs/admin'
function compileComponent(file){

    console.log("compiling vue file: .%s", file)
  // get component name from file name (file: a.vue, name: a)
  var name = file.substring(1, file.lastIndexOf('/')).toLowerCase().split('/').join('-')
  var nameCamelCase = camelcase(name)
  var nameCapitalCamelCase = nameCamelCase.charAt(0).toUpperCase() + nameCamelCase.slice(1)

  // each component needs a unique module name
  var moduleName = 'cmp'+nameCapitalCamelCase

  // compile the Vue component and give us a .js and .css
  rollup.rollup({
    entry: `${basePath}${file}`,
    plugins: [
      vue({
        compileTemplate: true,
        css: `${distBasePath}/css/${nameCamelCase}.css`
      }),
      buble()
    ]
  }).then( function(bundle) {

    bundle.write({
      format: 'iife',
      moduleName: moduleName,
      dest: `${distBasePath}/js/${nameCamelCase}.js`,
      globals: {
        tools: 'tools',
          log: 'log'
      }

    }).then( function() {
        if(watching) {
            var file = `${distBasePath}/js/${nameCamelCase}.js`
            var parts = file.split('jcr_root')
            uploadToAEM(parts[1], file)
        }
    })


  })
  return { name: name, nameCamelCase: nameCamelCase, nameCapitalCamelCase: nameCapitalCamelCase}
}

function readDirs(basePath, path, extFilter) {
    var ret = new Array()
    var files = fs.readdirSync(path)
    files.forEach( function(file) {
        var filePath = path + '/' + file;
        if(filePath.endsWith(extFilter)) {
            ret.push(filePath.slice(basePath.length))
        }
        var stats = fs.statSync(filePath)
        if(stats.isDirectory()) {
            ret = ret.concat(readDirs(basePath, filePath, extFilter))
        }
    })
    return ret;
}

fs.mkdirsSync(distBasePath+'/js/')
fs.mkdirsSync(distBasePath+'/css/')


function make() {
    var vueFiles = readDirs(basePath, basePath, '.vue')

    vueFiles.forEach( function(file) {

        compileComponent(file)

    })

    var jsFiles = readDirs(distBasePath+'/', distBasePath + '/js', '.js')
    jsFiles.unshift('<!-- auto generated by build -->')
    fs.writeFileSync(distBasePath+'/js.txt', jsFiles.join('\n'))

    var cssFiles = readDirs(distBasePath+'/', distBasePath + '/css', '.css')
    cssFiles.unshift('<!-- auto generated by build -->')
    fs.writeFileSync(distBasePath+'/css.txt', cssFiles.join('\n'))
}

function watchForChangesIn(rootPath, extensions) {

    for(var i = 0; i < extensions.length; i++) {
        consideredExtensions[extensions[i]] = true
    }

    console.log('watching', rootPath)
    // watch the src folder
    fs.watch(rootPath, { recursive: true}, function(eventType, filename) {

        if(eventType === 'change') {
            var lastDot = filename.lastIndexOf('.')
            var ext = ''
            if(lastDot >= 0) {
                ext = filename.slice(lastDot+1)
            }
            if(consideredExtensions[ext]) {
                console.log(new Date().toLocaleTimeString(), eventType, filename)
                make()
            }
        }
    })
}


make()

if(process.argv[2]) {
    watching = true
    watchForChangesIn(basePath, [ 'vue' ] )
}


